name: Deploy PR to Development

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy'
        required: true
        type: number

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  check-permission:
    name: Check Permission
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch') ||
      (github.event.issue.pull_request && 
       (contains(github.event.comment.body, '/deploy') || 
        contains(github.event.comment.body, '/deploy-dev')))
    outputs:
      allowed: ${{ steps.check.outputs.allowed }}
      pr_number: ${{ steps.pr.outputs.number }}
      pr_sha: ${{ steps.pr.outputs.sha }}
      pr_branch: ${{ steps.pr.outputs.branch }}
    
    steps:
      - name: Check if user has write permission
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const actor = context.actor;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Check user permission
            try {
              const { data: perm } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner,
                repo,
                username: actor
              });
              
              const hasAccess = ['admin', 'maintain', 'write'].includes(perm.permission);
              core.setOutput('allowed', hasAccess);
              
              if (!hasAccess) {
                core.setFailed(`User ${actor} does not have write permission`);
              }
            } catch (error) {
              core.setOutput('allowed', false);
              core.setFailed(`Failed to check permissions: ${error.message}`);
            }
      
      - name: Get PR details
        id: pr
        if: steps.check.outputs.allowed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            let pr_number;
            
            if (context.eventName === 'workflow_dispatch') {
              pr_number = context.payload.inputs.pr_number;
            } else {
              // Extract PR number from issue comment event
              pr_number = context.issue.number;
            }
            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr_number
            });
            
            core.setOutput('number', pr_number);
            core.setOutput('sha', pr.head.sha);
            core.setOutput('branch', pr.head.ref);
            core.setOutput('short_sha', pr.head.sha.substring(0, 7));
            
            return pr;

  deploy-pr:
    name: Deploy PR to Development
    runs-on: ubuntu-latest
    needs: check-permission
    if: needs.check-permission.outputs.allowed == 'true'
    environment:
      name: pr-development
      url: https://pr-${{ needs.check-permission.outputs.pr_number }}.dev.theedgestory.org
    permissions:
      contents: read
      packages: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Add deploying comment
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.check-permission.outputs.pr_number }},
              body: 'ðŸš€ Deploying PR #${{ needs.check-permission.outputs.pr_number }} to development environment...'
            });
      
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-permission.outputs.pr_sha }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=pr-${{ needs.check-permission.outputs.pr_number }}
            type=raw,value=pr-${{ needs.check-permission.outputs.pr_number }}-${{ needs.check-permission.outputs.pr_sha }}
            type=raw,value=pr-${{ needs.check-permission.outputs.pr_number }}-latest
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.created }}
            VCS_REF=${{ needs.check-permission.outputs.pr_sha }}
            VERSION=pr-${{ needs.check-permission.outputs.pr_number }}
      
      - name: Checkout core-charts repository
        uses: actions/checkout@v4
        with:
          repository: uz0/core-charts
          token: ${{ secrets.CORE_CHARTS_PAT }}
          path: core-charts
      
      - name: Update Helm values for PR deployment
        run: |
          cd core-charts
          PR_NUMBER=${{ needs.check-permission.outputs.pr_number }}
          IMAGE_TAG="pr-${PR_NUMBER}-latest"
          
          # Create or update PR-specific values file
          VALUES_FILE="charts/core-pipeline/values-pr-${PR_NUMBER}.yaml"
          
          # Copy dev values as base
          cp charts/core-pipeline/values-dev.yaml ${VALUES_FILE}
          
          # Update the image tag and ingress host
          yq eval ".image.tag = \"${IMAGE_TAG}\"" -i ${VALUES_FILE}
          yq eval ".ingress.enabled = true" -i ${VALUES_FILE}
          yq eval ".ingress.hosts[0].host = \"pr-${PR_NUMBER}.dev.theedgestory.org\"" -i ${VALUES_FILE}
          yq eval ".nameOverride = \"core-pipeline-pr-${PR_NUMBER}\"" -i ${VALUES_FILE}
          
          # Add PR labels
          yq eval ".labels.pr = \"${PR_NUMBER}\"" -i ${VALUES_FILE}
          yq eval ".labels.branch = \"${{ needs.check-permission.outputs.pr_branch }}\"" -i ${VALUES_FILE}
          
          # Show the changes
          echo "Created/Updated ${VALUES_FILE} for PR #${PR_NUMBER}"
          git diff
      
      - name: Commit and push changes
        run: |
          cd core-charts
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          PR_NUMBER=${{ needs.check-permission.outputs.pr_number }}
          VALUES_FILE="charts/core-pipeline/values-pr-${PR_NUMBER}.yaml"
          
          git add ${VALUES_FILE}
          git commit -m "[PR Deploy] Deploy PR #${PR_NUMBER} to development" || echo "No changes to commit"
          git push
      
      - name: Comment deployment success
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ needs.check-permission.outputs.pr_number }};
            const sha = '${{ needs.check-permission.outputs.pr_sha }}';
            const short_sha = sha.substring(0, 7);
            
            const comment = `### âœ… PR Deployed to Development Environment
            
            **PR #${pr_number}** has been successfully deployed!
            
            ðŸ”— **URL:** https://pr-${pr_number}.dev.theedgestory.org
            ðŸ“¦ **Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${pr_number}-latest\`
            ðŸ”¨ **Commit:** \`${sha}\`
            
            **To redeploy this PR:**
            - Comment \`/deploy\` or \`/deploy-dev\` on this PR
            - Or use Actions â†’ Deploy PR to Development â†’ Run workflow
            
            **To remove this deployment:**
            - Comment \`/undeploy\` on this PR`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number,
              body: comment
            });
      
      - name: Add deployment status
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              environment_url: `https://pr-${{ needs.check-permission.outputs.pr_number }}.dev.theedgestory.org`,
              description: 'PR deployed to development'
            });

  cleanup-pr:
    name: Cleanup PR Deployment
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '/undeploy')
    needs: check-permission
    
    steps:
      - name: Checkout core-charts repository
        uses: actions/checkout@v4
        with:
          repository: uz0/core-charts
          token: ${{ secrets.CORE_CHARTS_PAT }}
          path: core-charts
      
      - name: Remove PR deployment values
        run: |
          cd core-charts
          PR_NUMBER=${{ needs.check-permission.outputs.pr_number }}
          VALUES_FILE="charts/core-pipeline/values-pr-${PR_NUMBER}.yaml"
          
          if [ -f ${VALUES_FILE} ]; then
            git rm ${VALUES_FILE}
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m "[PR Cleanup] Remove deployment for PR #${PR_NUMBER}"
            git push
            echo "Removed deployment for PR #${PR_NUMBER}"
          else
            echo "No deployment found for PR #${PR_NUMBER}"
          fi
      
      - name: Comment cleanup success
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ needs.check-permission.outputs.pr_number }},
              body: 'ðŸ§¹ PR deployment has been removed from development environment.'
            });