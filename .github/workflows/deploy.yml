name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && 'Production' || 'Development' }}
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && 'production' || 'development' }}
      url: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') && 'https://core-pipeline.theedgestory.org' || 'https://dev.core-pipeline.theedgestory.org' }}
    permissions:
      contents: read
      deployments: write
    
    steps:
      - name: Create deployment record
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const isProd = context.eventName === 'push' && context.ref === 'refs/heads/main';
            const environment = isProd ? 'production' : 'development';
            const url = isProd ? 'https://core-pipeline.theedgestory.org' : 'https://dev.core-pipeline.theedgestory.org';
            
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              task: 'deploy',
              auto_merge: false,
              required_contexts: [],
              environment: environment,
              description: `Deploy to ${environment}`,
              production_environment: isProd
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              environment_url: url
            });
            
            core.setOutput('deployment_id', deployment.data.id);
            core.setOutput('environment', environment);
            core.setOutput('url', url);
      
      - name: Checkout core-charts repository
        uses: actions/checkout@v4
        with:
          repository: uz0/core-charts
          token: ${{ secrets.CORE_CHARTS_PAT }}
          path: core-charts

      - name: Update Helm values
        run: |
          cd core-charts
          ENVIRONMENT=${{ steps.deployment.outputs.environment == 'production' && 'prod' || 'dev' }}
          IMAGE_TAG="${{ needs.build-and-push.outputs.image-tag }}"
          
          yq eval ".image.tag = \"${IMAGE_TAG}\"" -i charts/core-pipeline/values-${ENVIRONMENT}.yaml
          
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add charts/core-pipeline/values-${ENVIRONMENT}.yaml
          git commit -m "Deploy to ${ENVIRONMENT}: ${IMAGE_TAG}" || echo "No changes"
          git push

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: state,
              environment_url: '${{ steps.deployment.outputs.url }}'
            });