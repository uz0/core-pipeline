name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate unique image tag
        id: image-tag
        run: |
          # Use short SHA as unique tag for each commit
          SHORT_SHA=$(git rev-parse --short HEAD)
          TAG="main-${SHORT_SHA}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated image tag: ${TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.image-tag.outputs.tag }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') || (github.event_name == 'push' && github.ref == 'refs/heads/main') && 'Production' || 'Development' }}
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') || (github.event_name == 'push' && github.ref == 'refs/heads/main') && 'production' || 'development' }}
      url: ${{ ((github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') || (github.event_name == 'push' && github.ref == 'refs/heads/main')) && 'https://core-pipeline.theedgestory.org' || 'https://core-pipeline-dev.theedgestory.org' }}
    permissions:
      contents: read
      deployments: write

    steps:
      # Determine target environment based on trigger type and branch
      - name: Determine deployment environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger: use selected environment
            ENV="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            # Push to main branch: deploy to production
            ENV="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            # Push to develop branch: deploy to development
            ENV="development"
          else
            # Default to development for other branches
            ENV="development"
          fi

          # Set environment-specific variables
          if [[ "$ENV" == "production" ]]; then
            BRANCH="main"
            URL="https://core-pipeline.theedgestory.org"
            APP_NAME="core-pipeline"
          else
            BRANCH="develop"
            URL="https://core-pipeline-dev.theedgestory.org"
            APP_NAME="core-pipeline-dev"
          fi

          echo "environment=${ENV}" >> $GITHUB_OUTPUT
          echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
          echo "url=${URL}" >> $GITHUB_OUTPUT
          echo "app_name=${APP_NAME}" >> $GITHUB_OUTPUT
          echo "Deploying to ${ENV} environment (${APP_NAME})"

      # Create GitHub deployment record for tracking
      - name: Create deployment record
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const environment = '${{ steps.env.outputs.environment }}';
            const url = '${{ steps.env.outputs.url }}';
            const isProd = environment === 'production';

            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              task: 'deploy',
              auto_merge: false,
              required_contexts: [],
              environment: environment,
              description: `Deploy to ${environment} via Kubero`,
              production_environment: isProd
            });

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'in_progress',
              environment_url: url,
              description: 'Triggering Kubero deployment...'
            });

            core.setOutput('deployment_id', deployment.data.id);

      # Trigger Kubero deployment via webhook
      - name: Trigger Kubero deployment
        id: kubero
        run: |
          echo "Triggering Kubero deployment for ${{ steps.env.outputs.app_name }}"

          # Prepare webhook payload (GitHub-style webhook format)
          PAYLOAD=$(cat <<EOF
          {
            "ref": "refs/heads/${{ steps.env.outputs.branch }}",
            "repository": {
              "full_name": "${{ github.repository }}",
              "clone_url": "https://github.com/${{ github.repository }}.git"
            },
            "after": "${{ github.sha }}",
            "head_commit": {
              "id": "${{ github.sha }}",
              "message": $(echo '${{ toJSON(github.event.head_commit.message) }}' | jq -R .)
            }
          }
          EOF
          )

          # Calculate HMAC signature for webhook authentication
          SIGNATURE=$(echo -n "$PAYLOAD" | openssl dgst -sha256 -hmac '${{ secrets.KUBERO_WEBHOOK_SECRET }}' | sed 's/^.* //')

          # Send webhook to Kubero
          HTTP_CODE=$(curl -s -o /tmp/kubero_response.json -w "%{http_code}" \
            -X POST "https://dev.theedgestory.org/api/repo/webhooks" \
            -H "Content-Type: application/json" \
            -H "X-Hub-Signature-256: sha256=${SIGNATURE}" \
            -H "X-GitHub-Event: push" \
            -d "$PAYLOAD")

          echo "Kubero webhook response code: ${HTTP_CODE}"

          if [[ -f /tmp/kubero_response.json ]]; then
            echo "Response body:"
            cat /tmp/kubero_response.json
          fi

          # Check if webhook was successful (2xx status code)
          if [[ "$HTTP_CODE" =~ ^2[0-9]{2}$ ]]; then
            echo "✅ Kubero deployment triggered successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Failed to trigger Kubero deployment (HTTP ${HTTP_CODE})"
            echo "success=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Update GitHub deployment status based on webhook result
      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const kuberoSuccess = '${{ steps.kubero.outputs.success }}' === 'true';
            const jobSuccess = '${{ job.status }}' === 'success';

            let state, description;
            if (jobSuccess && kuberoSuccess) {
              state = 'success';
              description = 'Deployed to Kubero - check Kubero UI for deployment progress';
            } else if (!kuberoSuccess) {
              state = 'failure';
              description = 'Failed to trigger Kubero webhook';
            } else {
              state = 'failure';
              description = 'Deployment job failed';
            }

            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.deployment_id }},
              state: state,
              environment_url: '${{ steps.env.outputs.url }}',
              description: description
            });