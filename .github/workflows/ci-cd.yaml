name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run tests
        run: npm test
      
      - name: Run test coverage
        run: npm run test:cov
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.core-pipeline.example.com
    
    steps:
      - name: Checkout core-charts repository
        uses: actions/checkout@v4
        with:
          repository: uz0/core-charts
          token: ${{ secrets.GITHUB_TOKEN }}
          path: core-charts
      
      - name: Update Helm values for dev
        run: |
          cd core-charts
          IMAGE_TAG="$(echo ${{ needs.build.outputs.image-tag }} | sed 's/.*://')"
          yq eval ".image.tag = \"${IMAGE_TAG}\"" -i charts/core-pipeline/values-dev.yaml
      
      - name: Commit and push Helm values
        run: |
          cd core-charts
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add charts/core-pipeline/values-dev.yaml
          IMAGE_TAG="$(echo ${{ needs.build.outputs.image-tag }} | sed 's/.*://')"
          git commit -m "Update dev image to ${IMAGE_TAG}" || echo "No changes to commit"
          git push || echo "Nothing to push"

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://core-pipeline.example.com
    
    steps:
      - name: Checkout core-charts repository
        uses: actions/checkout@v4
        with:
          repository: uz0/core-charts
          token: ${{ secrets.GITHUB_TOKEN }}
          path: core-charts
      
      - name: Update Helm values for prod
        run: |
          cd core-charts
          IMAGE_TAG="$(echo ${{ needs.build.outputs.image-tag }} | sed 's/.*://')"
          yq eval ".image.tag = \"${IMAGE_TAG}\"" -i charts/core-pipeline/values-prod.yaml
      
      - name: Commit and push Helm values
        run: |
          cd core-charts
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add charts/core-pipeline/values-prod.yaml
          IMAGE_TAG="$(echo ${{ needs.build.outputs.image-tag }} | sed 's/.*://')"
          git commit -m "Update prod image to ${IMAGE_TAG}" || echo "No changes to commit"
          git push || echo "Nothing to push"
      
      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            const { data } = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              task: 'deploy',
              auto_merge: false,
              environment: 'production',
              description: 'Deployed via GitHub Actions',
              payload: {
                image: '${{ needs.build.outputs.image-tag }}',
                digest: '${{ needs.build.outputs.image-digest }}'
              }
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: data.id,
              state: 'success',
              environment_url: 'https://core-pipeline.example.com',
              description: 'Deployment completed successfully'
            });